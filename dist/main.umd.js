!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).IntervalTree={})}(this,function(t){"use strict";class e{constructor(t,e){this.low=t,this.high=e}clone(){return new e(this.low,this.high)}get max(){return this.clone()}less_than(t){return this.low<t.low||this.low===t.low&&this.high<t.high}equal_to(t){return this.low===t.low&&this.high===t.high}intersect(t){return!this.not_intersect(t)}not_intersect(t){return this.high<t.low||t.high<this.low}merge(t){return new e(void 0===this.low?t.low:this.low<t.low?this.low:t.low,void 0===this.high?t.high:this.high>t.high?this.high:t.high)}output(){return[this.low,this.high]}static comparable_max(t,e){return t.merge(e)}static comparable_less_than(t,e){return t<e}}class r{constructor(t=void 0,r=void 0,i=null,o=null,l=null,n=0){if(this.left=i,this.right=o,this.parent=l,this.color=n,this.item={key:t,values:[]},void 0!==r&&this.item.values.push(r),t&&Array.isArray(t)&&2===t.length&&!Number.isNaN(t[0])&&!Number.isNaN(t[1])){let[r,i]=t;r>i&&([r,i]=[i,r]),this.item.key=new e(r,i)}this.max=this.item.key?this.item.key.max:void 0}isNil(){return void 0===this.item.key&&0===this.item.values.length&&null===this.left&&null===this.right&&0===this.color}less_than(t){return this.item.key.less_than(t.item.key)}_value_equal(t){const e=this.item.values[0],r=t.item.values[0];return e&&r&&e.equal_to?e.equal_to(r):e===r}equal_to(t){return this.item.key.equal_to(t.item.key)}intersect(t){return this.item.key.intersect(t.item.key)}copy_data(t){this.item.key=t.item.key,this.item.values=t.item.values.slice()}update_max(){this.max=this.item.key?this.item.key.max:void 0,this.right&&this.right.max&&(this.max=e.comparable_max(this.max,this.right.max)),this.left&&this.left.max&&(this.max=e.comparable_max(this.max,this.left.max))}not_intersect_left_subtree(t){const r=void 0!==this.left.max.high?this.left.max.high:this.left.max;return e.comparable_less_than(r,t.item.key.low)}not_intersect_right_subtree(t){const r=void 0!==this.right.max.low?this.right.max.low:this.right.item.key.low;return e.comparable_less_than(t.item.key.high,r)}}class i{constructor(){this.root=null,this.nil_node=new r}get size(){let t=0;return this.tree_walk(this.root,e=>t+=e.item.values.length),t}get keys(){const t=[];return this.tree_walk(this.root,e=>t.push(e.item.key.output?e.item.key.output():e.item.key)),t}get values(){const t=[];return this.tree_walk(this.root,e=>{for(const r of e.item.values)t.push(r)}),t}get items(){const t=[];return this.tree_walk(this.root,e=>{const r=e.item.key.output?e.item.key.output():e.item.key;for(const i of e.item.values)t.push({key:r,value:i})}),t}isEmpty(){return null==this.root||this.root===this.nil_node}clear(){this.root=null}insert(t,e=t){if(void 0===t)return;const i=this.tree_search(this.root,new r(t));if(i)return i.item.values.push(e),i;const o=new r(t,e,this.nil_node,this.nil_node,null,1);return this.tree_insert(o),this.recalc_max(o),o}exist(t,e=t){const i=this.tree_search(this.root,new r(t));return!!i&&(arguments.length<2||e===t||i.item.values.some(t=>t&&t.equal_to?t.equal_to(e):t===e))}remove(t,e=t){const i=this.tree_search(this.root,new r(t));if(!i)return;if(arguments.length<2)return this.tree_delete(i),i;const o=i.item.values.findIndex(t=>t&&t.equal_to?t.equal_to(e):t===e);return o>=0?(i.item.values.splice(o,1),0===i.item.values.length&&this.tree_delete(i),i):void 0}search(t,e=(t,e)=>t===e?e.output():t){const i=new r(t),o=[];this.tree_search_interval(this.root,i,o);const l=[];for(const t of o)for(const r of t.item.values)l.push(e(r,t.item.key));return l}intersect_any(t){const e=new r(t);return this.tree_find_any_interval(this.root,e)}forEach(t){this.tree_walk(this.root,e=>{for(const r of e.item.values)t(e.item.key,r)})}map(t){const e=new i;return this.tree_walk(this.root,r=>{for(const i of r.item.values)e.insert(r.item.key,t(i,r.item.key))}),e}*iterate(t,e=(t,e)=>t===e?e.output():t){let i=null;for(t?i=this.tree_search_nearest_forward(this.root,new r(t)):this.root&&(i=this.local_minimum(this.root));i;){for(const t of i.item.values)yield e(t,i.item.key);i=this.tree_successor(i)}}recalc_max(t){let e=t;for(;null!=e.parent;)e.parent.update_max(),e=e.parent}tree_insert(t){let e=this.root,r=null;if(null==this.root||this.root===this.nil_node)this.root=t;else{for(;e!==this.nil_node;)r=e,e=t.less_than(e)?e.left:e.right;t.parent=r,t.less_than(r)?r.left=t:r.right=t}this.insert_fixup(t)}insert_fixup(t){let e,r;for(e=t;e!==this.root&&1===e.parent.color;)e.parent===e.parent.parent.left?(r=e.parent.parent.right,1===r.color?(e.parent.color=0,r.color=0,e.parent.parent.color=1,e=e.parent.parent):(e===e.parent.right&&(e=e.parent,this.rotate_left(e)),e.parent.color=0,e.parent.parent.color=1,this.rotate_right(e.parent.parent))):(r=e.parent.parent.left,1===r.color?(e.parent.color=0,r.color=0,e.parent.parent.color=1,e=e.parent.parent):(e===e.parent.left&&(e=e.parent,this.rotate_right(e)),e.parent.color=0,e.parent.parent.color=1,this.rotate_left(e.parent.parent)));this.root.color=0}tree_delete(t){let e,r;e=t.left===this.nil_node||t.right===this.nil_node?t:this.tree_successor(t),r=e.left!==this.nil_node?e.left:e.right,r.parent=e.parent,e===this.root?this.root=r:(e===e.parent.left?e.parent.left=r:e.parent.right=r,e.parent.update_max()),this.recalc_max(r),e!==t&&(t.copy_data(e),t.update_max(),this.recalc_max(t)),0===e.color&&this.delete_fixup(r)}delete_fixup(t){let e,r=t;for(;r!==this.root&&null!=r.parent&&0===r.color;)r===r.parent.left?(e=r.parent.right,1===e.color&&(e.color=0,r.parent.color=1,this.rotate_left(r.parent),e=r.parent.right),0===e.left.color&&0===e.right.color?(e.color=1,r=r.parent):(0===e.right.color&&(e.color=1,e.left.color=0,this.rotate_right(e),e=r.parent.right),e.color=r.parent.color,r.parent.color=0,e.right.color=0,this.rotate_left(r.parent),r=this.root)):(e=r.parent.left,1===e.color&&(e.color=0,r.parent.color=1,this.rotate_right(r.parent),e=r.parent.left),0===e.left.color&&0===e.right.color?(e.color=1,r=r.parent):(0===e.left.color&&(e.color=1,e.right.color=0,this.rotate_left(e),e=r.parent.left),e.color=r.parent.color,r.parent.color=0,e.left.color=0,this.rotate_right(r.parent),r=this.root));r.color=0}tree_search(t,e){if(null!=t&&t!==this.nil_node)return e.equal_to(t)?t:e.less_than(t)?this.tree_search(t.left,e):this.tree_search(t.right,e)}tree_search_nearest_forward(t,e){let r=null,i=t;for(;i&&i!==this.nil_node;)i.less_than(e)?i.intersect(e)?(r=i,i=i.left):i=i.right:(r&&!i.less_than(r)||(r=i),i=i.left);return r||null}tree_search_interval(t,e,r){null!=t&&t!==this.nil_node&&(t.left===this.nil_node||t.not_intersect_left_subtree(e)||this.tree_search_interval(t.left,e,r),t.intersect(e)&&r.push(t),t.right===this.nil_node||t.not_intersect_right_subtree(e)||this.tree_search_interval(t.right,e,r))}tree_find_any_interval(t,e){let r=!1;return null!=t&&t!==this.nil_node&&(t.left===this.nil_node||t.not_intersect_left_subtree(e)||(r=this.tree_find_any_interval(t.left,e)),r||(r=t.intersect(e)),r||t.right===this.nil_node||t.not_intersect_right_subtree(e)||(r=this.tree_find_any_interval(t.right,e))),r}local_minimum(t){let e=t;for(;null!=e.left&&e.left!==this.nil_node;)e=e.left;return e}local_maximum(t){let e=t;for(;null!=e.right&&e.right!==this.nil_node;)e=e.right;return e}tree_successor(t){let e,r,i;if(t.right!==this.nil_node)e=this.local_minimum(t.right);else{for(r=t,i=t.parent;null!=i&&i.right===r;)r=i,i=i.parent;e=i}return e}rotate_left(t){const e=t.right;t.right=e.left,e.left!==this.nil_node&&(e.left.parent=t),e.parent=t.parent,t===this.root?this.root=e:t===t.parent.left?t.parent.left=e:t.parent.right=e,e.left=t,t.parent=e,null!==t&&t!==this.nil_node&&t.update_max(),null!=e&&e!==this.nil_node&&e.update_max()}rotate_right(t){const e=t.left;t.left=e.right,e.right!==this.nil_node&&(e.right.parent=t),e.parent=t.parent,t===this.root?this.root=e:t===t.parent.left?t.parent.left=e:t.parent.right=e,e.right=t,t.parent=e,null!==t&&t!==this.nil_node&&t.update_max(),null!=e&&e!==this.nil_node&&e.update_max()}tree_walk(t,e){null!=t&&t!==this.nil_node&&(this.tree_walk(t.left,e),e(t),this.tree_walk(t.right,e))}testRedBlackProperty(){let t=!0;return this.tree_walk(this.root,function(e){1===e.color&&(0===e.left.color&&0===e.right.color||(t=!1))}),t}testBlackHeightProperty(t){let e=0,r=0,i=0;if(0===t.color&&e++,r=t.left!==this.nil_node?this.testBlackHeightProperty(t.left):1,i=t.right!==this.nil_node?this.testBlackHeightProperty(t.right):1,r!==i)throw new Error("Red-black height property violated");return e+=r,e}}t.Interval=e,t.IntervalTree=i,t.Node=r,t.default=i,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=main.umd.js.map
